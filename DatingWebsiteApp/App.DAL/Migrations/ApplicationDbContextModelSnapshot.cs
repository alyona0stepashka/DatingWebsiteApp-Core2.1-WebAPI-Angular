// <auto-generated />
using System;
using App.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("App.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FileId");

                    b.Property<int>("IncomingFirstMessageCount");

                    b.Property<bool>("IsAnonimus");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MainGoalId");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OutgoingFirstMessageCount");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("ProfileViewsForMonth");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("SexId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("TypeId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MainGoalId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("SexId");

                    b.HasIndex("TypeId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("App.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("BadHabits");
                });

            modelBuilder.Entity("App.Models.BadHabitUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BadHabitId");

                    b.Property<int>("PersonalTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BadHabitId");

                    b.HasIndex("PersonalTypeId");

                    b.ToTable("BadHabitUsers");
                });

            modelBuilder.Entity("App.Models.BlackList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserFromId");

                    b.Property<string>("UserToId");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("BlackLists");
                });

            modelBuilder.Entity("App.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("DateSend");

                    b.Property<bool>("IsNew");

                    b.Property<string>("Text");

                    b.Property<string>("UserSenderId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("App.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsBlock");

                    b.Property<DateTime>("UserFromClearHistory");

                    b.Property<string>("UserFromId");

                    b.Property<DateTime>("UserToClearHistory");

                    b.Property<string>("UserToId");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("App.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("App.Models.FamilyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("FamilyStatuses");
                });

            modelBuilder.Entity("App.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MessageId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<int?>("PhotoAlbumId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("PhotoAlbumId");

                    b.ToTable("FileModels");
                });

            modelBuilder.Entity("App.Models.FinanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("FinanceStatuses");
                });

            modelBuilder.Entity("App.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Status");

                    b.Property<string>("UserFromId");

                    b.Property<string>("UserToId");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("App.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("App.Models.InterestUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InterestId");

                    b.Property<int>("PersonalTypeId");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("PersonalTypeId");

                    b.ToTable("InterestUsers");
                });

            modelBuilder.Entity("App.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("App.Models.LanguageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LanguageId");

                    b.Property<int>("PersonalTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PersonalTypeId");

                    b.ToTable("LanguageUsers");
                });

            modelBuilder.Entity("App.Models.MainGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("MainGoals");
                });

            modelBuilder.Entity("App.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("App.Models.PersonalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EducationId");

                    b.Property<int?>("FamilyStatusId");

                    b.Property<int?>("FinanceStatusId");

                    b.Property<double?>("Growth");

                    b.Property<int?>("NationalityId");

                    b.Property<double?>("Weight");

                    b.Property<int?>("ZodiacId");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("FamilyStatusId");

                    b.HasIndex("FinanceStatusId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ZodiacId");

                    b.ToTable("PersonalTypes");
                });

            modelBuilder.Entity("App.Models.PhotoAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoAlbums");
                });

            modelBuilder.Entity("App.Models.ProfileVisitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastVisit");

                    b.Property<string>("OwnerProfileId");

                    b.Property<string>("VisitorId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerProfileId");

                    b.HasIndex("VisitorId");

                    b.ToTable("ProfileVisitors");
                });

            modelBuilder.Entity("App.Models.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("App.Models.Zodiac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Zodiacs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App.Models.ApplicationUser", b =>
                {
                    b.HasOne("App.Models.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("App.Models.MainGoal", "MainGoal")
                        .WithMany()
                        .HasForeignKey("MainGoalId");

                    b.HasOne("App.Models.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("App.Models.PersonalType", "Type")
                        .WithOne("User")
                        .HasForeignKey("App.Models.ApplicationUser", "TypeId");
                });

            modelBuilder.Entity("App.Models.BadHabitUser", b =>
                {
                    b.HasOne("App.Models.BadHabit", "BadHabit")
                        .WithMany()
                        .HasForeignKey("BadHabitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Models.PersonalType", "PersonalType")
                        .WithMany("BadHabits")
                        .HasForeignKey("PersonalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Models.BlackList", b =>
                {
                    b.HasOne("App.Models.ApplicationUser", "UserFrom")
                        .WithMany("BlackListsFrom")
                        .HasForeignKey("UserFromId");

                    b.HasOne("App.Models.ApplicationUser", "UserTo")
                        .WithMany("BlackListsTo")
                        .HasForeignKey("UserToId");
                });

            modelBuilder.Entity("App.Models.ChatMessage", b =>
                {
                    b.HasOne("App.Models.ChatRoom", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Models.ApplicationUser", "UserSender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserSenderId");
                });

            modelBuilder.Entity("App.Models.ChatRoom", b =>
                {
                    b.HasOne("App.Models.ApplicationUser", "UserFrom")
                        .WithMany("ChatsFrom")
                        .HasForeignKey("UserFromId");

                    b.HasOne("App.Models.ApplicationUser", "UserTo")
                        .WithMany("ChatsTo")
                        .HasForeignKey("UserToId");
                });

            modelBuilder.Entity("App.Models.FileModel", b =>
                {
                    b.HasOne("App.Models.ChatMessage", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId");

                    b.HasOne("App.Models.PhotoAlbum", "PhotoAlbum")
                        .WithMany("Files")
                        .HasForeignKey("PhotoAlbumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Models.Friendship", b =>
                {
                    b.HasOne("App.Models.ApplicationUser", "UserFrom")
                        .WithMany("FriendshipsFrom")
                        .HasForeignKey("UserFromId");

                    b.HasOne("App.Models.ApplicationUser", "UserTo")
                        .WithMany("FriendshipsTo")
                        .HasForeignKey("UserToId");
                });

            modelBuilder.Entity("App.Models.InterestUser", b =>
                {
                    b.HasOne("App.Models.Interest", "Interest")
                        .WithMany()
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Models.PersonalType", "PersonalType")
                        .WithMany("Interests")
                        .HasForeignKey("PersonalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Models.LanguageUser", b =>
                {
                    b.HasOne("App.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Models.PersonalType", "PersonalType")
                        .WithMany("Languages")
                        .HasForeignKey("PersonalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Models.PersonalType", b =>
                {
                    b.HasOne("App.Models.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId");

                    b.HasOne("App.Models.FamilyStatus", "FamilyStatus")
                        .WithMany()
                        .HasForeignKey("FamilyStatusId");

                    b.HasOne("App.Models.FinanceStatus", "FinanceStatus")
                        .WithMany()
                        .HasForeignKey("FinanceStatusId");

                    b.HasOne("App.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("App.Models.Zodiac", "Zodiac")
                        .WithMany()
                        .HasForeignKey("ZodiacId");
                });

            modelBuilder.Entity("App.Models.PhotoAlbum", b =>
                {
                    b.HasOne("App.Models.ApplicationUser", "User")
                        .WithMany("PhotoAlbums")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("App.Models.ProfileVisitor", b =>
                {
                    b.HasOne("App.Models.ApplicationUser", "OwnerProfile")
                        .WithMany("ProfileOwner")
                        .HasForeignKey("OwnerProfileId");

                    b.HasOne("App.Models.ApplicationUser", "Visitor")
                        .WithMany("ProfileVisitor")
                        .HasForeignKey("VisitorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
